{"version":3,"sources":["NewTaskForm/NewTaskForm.jsx","Task/Task.jsx","TaskList/TaskList.jsx","TaskFilter/TaskFilter.jsx","Footer/Footer.jsx","App/App.jsx","index.jsx"],"names":["NewTaskForm","state","value","this","addTask","props","className","placeholder","onChange","event","setState","target","onKeyDown","keyCode","React","Component","defaultProps","Task","completeToogler","completeChanged","id","currentTaskDestroyed","taskDestroyed","completed","taskText","taskCreateTime","type","onClick","defaultChecked","formatDistanceToNow","includeSeconds","aria-label","defaultValue","Date","Math","random","TaskList","todoData","currentFilter","arrTaskList","filter","el","slice","map","element","key","tasksFiltered","TaskFilter","activeButton","changeFilter","textContent","Footer","clearCompleted","uncompletedTasks","App","serverInfo","tasksRemain","forEach","newServerInfo","filterName","push","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd0a41aa.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NewTaskForm.css';\n\nclass NewTaskForm extends React.Component {\n  state = {\n    value: '',\n  };\n\n  static defaultProps = {\n    addTask: () => {},\n  };\n\n  static propTypes = {\n    addTask: PropTypes.func,\n  };\n\n  render() {\n    const { value } = this.state;\n    const { addTask } = this.props;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={value}\n          onChange={(event) => {\n            this.setState({ value: event.target.value });\n          }}\n          onKeyDown={(event) => {\n            if (event.keyCode === 13 && event.target.value !== '') {\n              addTask(value);\n              this.setState({ value: '' });\n              // console.log(value);\n            }\n          }}\n        />\n      </header>\n    );\n  }\n}\n\nexport default NewTaskForm;\n","import React from 'react';\n// import ReactDOM from \"react-dom\";\nimport PropTypes from 'prop-types';\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\n\nimport './Task.css';\n\nclass Task extends React.Component {\n  static defaultProps = {\n    completed: false,\n    taskText: '',\n    taskCreateTime: new Date(),\n    id: Math.random(),\n    completeChanged: () => {},\n    taskDestroyed: () => {},\n    className: '',\n  };\n\n  static propTypes = {\n    completed: PropTypes.bool,\n    taskText: PropTypes.string,\n    taskCreateTime: PropTypes.objectOf(PropTypes.object),\n    id: PropTypes.number,\n    completeChanged: PropTypes.func,\n    taskDestroyed: PropTypes.func,\n    className: PropTypes.string,\n  };\n\n  completeToogler = () => {\n    const { completeChanged } = this.props;\n    const { id } = this.props;\n\n    completeChanged(id);\n  };\n\n  currentTaskDestroyed = () => {\n    const { id } = this.props;\n    const { taskDestroyed } = this.props;\n\n    taskDestroyed(id);\n  };\n\n  render() {\n    const { completed } = this.props;\n    const { taskText } = this.props;\n    const { taskCreateTime } = this.props;\n    const { className } = this.props;\n\n    // console.log(completed);\n    // console.log(this.props);\n    return (\n      <li className={completed ? 'completed' : ''}>\n        <div className=\"view\">\n          <input className=\"toggle\" type=\"checkbox\" onClick={this.completeToogler} defaultChecked={completed} />\n          <label>\n            <span className=\"description\">{taskText}</span>\n            <span className=\"created\">created {formatDistanceToNow(taskCreateTime, { includeSeconds: true })} ago</span>\n          </label>\n          <button className=\"icon icon-edit\" type=\"button\" aria-label=\"Редактировать\" />\n          <button\n            className=\"icon icon-destroy\"\n            onClick={this.currentTaskDestroyed}\n            type=\"button\"\n            aria-label=\"Удалить\"\n          />\n        </div>\n        {className === 'editing' ? <input type=\"text\" className=\"edit\" defaultValue=\"Editing task\" /> : null}\n      </li>\n    );\n  }\n}\n\nexport default Task;\n","import React from 'react';\n// import ReactDOM from \"react-dom\";\nimport PropTypes from 'prop-types';\n\nimport './TaskList.css';\n\nimport Task from '../Task/Task';\n\nconst TaskList = ({ todoData, completeChanged, taskDestroyed, currentFilter }) => {\n  const tasksFiltered = () => {\n    let arrTaskList;\n\n    if (currentFilter === 'Active') {\n      arrTaskList = todoData.filter((el) => el.completed === false);\n    }\n\n    if (currentFilter === 'Completed') {\n      arrTaskList = todoData.filter((el) => el.completed === true);\n    } else if (currentFilter === 'All') {\n      arrTaskList = todoData.slice();\n    }\n\n    arrTaskList = arrTaskList.map((element) => (\n      <Task {...element} key={element.id} completeChanged={completeChanged} taskDestroyed={taskDestroyed} />\n    ));\n\n    // console.log(currentFilter, arrTaskList, todoData);\n    return arrTaskList;\n  };\n\n  return <ul className=\"todo-list\">{tasksFiltered()}</ul>;\n};\n\nTaskList.defaultProps = {\n  todoData: [{}],\n  completeChanged: () => {},\n  taskDestroyed: () => {},\n  currentFilter: 'All',\n};\n\nTaskList.propTypes = {\n  todoData: PropTypes.arrayOf(PropTypes.object),\n  completeChanged: PropTypes.func,\n  taskDestroyed: PropTypes.func,\n  currentFilter: PropTypes.string,\n};\n\nexport default TaskList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './TaskFilter.css';\n\nclass TaskFilter extends React.Component {\n  state = {\n    activeButton: 'All',\n  };\n\n  static defaultProps = {\n    changeFilter: () => {},\n  };\n\n  static propTypes = {\n    changeFilter: PropTypes.func,\n  };\n\n  render() {\n    const { changeFilter } = this.props;\n    const { activeButton } = this.state;\n    return (\n      // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions\n      <ul\n        className=\"filters\"\n        onClick={(event) => {\n          changeFilter(event.target.textContent);\n          this.setState({\n            activeButton: event.target.textContent,\n          });\n        }}\n        onKeyDown={(event) => {\n          if (event.keyCode === 13) {\n            changeFilter(event.target.textContent);\n            this.setState({\n              activeButton: event.target.textContent,\n            });\n          }\n        }}\n      >\n        <li>\n          <button className={activeButton === 'All' ? 'selected' : null} type=\"button\">\n            All\n          </button>\n        </li>\n        <li>\n          <button className={activeButton === 'Active' ? 'selected' : null} type=\"button\">\n            Active\n          </button>\n        </li>\n        <li>\n          <button className={activeButton === 'Completed' ? 'selected' : null} type=\"button\">\n            Completed\n          </button>\n        </li>\n      </ul>\n    );\n  }\n}\n\nexport default TaskFilter;\n","import React from 'react';\n// import ReactDOM from \"react-dom\";\nimport PropTypes from 'prop-types';\n\nimport TaskFilter from '../TaskFilter/TaskFilter';\n\nimport './Footer.css';\n\nconst Footer = (props) => {\n  const { changeFilter } = props;\n  const { clearCompleted } = props;\n  const { uncompletedTasks } = props;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{uncompletedTasks()} items left</span>\n      <TaskFilter changeFilter={changeFilter} />\n      <button className=\"clear-completed\" onClick={clearCompleted} type=\"button\">\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.defaultProps = {\n  changeFilter: () => {},\n  clearCompleted: () => {},\n  uncompletedTasks: () => {},\n};\n\nFooter.propTypes = {\n  changeFilter: PropTypes.func,\n  clearCompleted: PropTypes.func,\n  uncompletedTasks: PropTypes.func,\n};\n\nexport default Footer;\n","import React from 'react';\n\nimport './App.css';\n\nimport NewTaskForm from '../NewTaskForm/NewTaskForm';\nimport TaskList from '../TaskList/TaskList';\nimport Footer from '../Footer/Footer';\n\nclass App extends React.Component {\n  state = {\n    serverInfo: [],\n    currentFilter: 'All',\n  };\n\n  uncompletedTasks = () => {\n    const { serverInfo } = this.state;\n\n    let tasksRemain = 0;\n\n    serverInfo.forEach((el) => {\n      if (el.completed === false) {\n        tasksRemain += 1;\n      }\n    });\n    return tasksRemain;\n  };\n\n  clearCompleted = () => {\n    const { serverInfo } = this.state;\n\n    const newServerInfo = serverInfo.filter((el) => el.completed === false);\n\n    this.setState({ serverInfo: newServerInfo });\n  };\n\n  changeFilter = (filterName) => {\n    // console.log(filterName);\n\n    this.setState({ currentFilter: filterName });\n    // console.log(this.state);\n  };\n\n  addTask = (taskText) => {\n    const { serverInfo } = this.state;\n\n    const newServerInfo = [...serverInfo];\n\n    newServerInfo.push({\n      id: Math.random(),\n      completed: false,\n      taskText,\n      taskCreateTime: new Date(),\n    });\n\n    this.setState({ serverInfo: newServerInfo });\n  };\n\n  completeChanged = (id) => {\n    let { serverInfo } = this.state;\n    serverInfo = [...serverInfo];\n\n    const newServerInfo = serverInfo.map((el) => {\n      const element = el;\n      if (el.id === id) {\n        element.completed = !element.completed;\n      }\n      return element;\n    });\n    // console.log(\"меняем на completed\");\n    // console.log(newServerInfo);\n\n    this.setState({ serverInfo: newServerInfo });\n  };\n\n  taskDestroyed = (id) => {\n    let { serverInfo } = this.state;\n    serverInfo = [...serverInfo];\n\n    const newServerInfo = serverInfo.filter((el) => el.id !== id);\n\n    this.setState({ serverInfo: newServerInfo });\n  };\n\n  render() {\n    const { serverInfo } = this.state;\n    const { currentFilter } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <NewTaskForm addTask={this.addTask} />\n        <TaskList\n          todoData={serverInfo}\n          completeChanged={this.completeChanged}\n          taskDestroyed={this.taskDestroyed}\n          currentFilter={currentFilter}\n        />\n        <Footer\n          changeFilter={this.changeFilter}\n          clearCompleted={this.clearCompleted}\n          uncompletedTasks={this.uncompletedTasks}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}